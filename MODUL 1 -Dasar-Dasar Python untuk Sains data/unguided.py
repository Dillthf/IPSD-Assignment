# -*- coding: utf-8 -*-
"""Unguided.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A9rGfZudQ5vixjBPIgQNByivofu5h_dJ

1. Buatlah program yang dapat menghasilkan pola berbentuk angka seperti di bawah ini, dengan syarat angka yang ditampilkan adalah hasil dari penjumlahan bilangan prima sebelumnya:
```
1
2 3
5 7 11
13 17 19 23
...
```
Jumlah angka pada setiap baris bertambah 1, dan bilangan yang ditampilkan adalah bilangan prima.
"""

def bil_prima(n):
    """Fungsi untuk memeriksa apakah sebuah bilangan adalah bilangan prima."""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def pola_bil_prima(rows):
    num = 2


    for i in range(1, rows + 1):
      if i == 1:
        print(1)

      else:
        for _ in range(i):
            while not bil_prima(num):
                num += 1
            print(num, end=" ")
            num += 1
        print()


pola_bil_prima(6)

"""2. Buatlah sebuah fungsi yang menerima dua input berupa list angka. Fungsi ini harus mengembalikan sebuah list baru yang berisi elemen dari dua list input yang memiliki indeks ganjil. List baru tersebut juga harus diurutkan secara menurun berdasarkan nilai elemen."""

def urutan_bilangan(list1, list2):
    list_1 = [list1[i] for i in range(1, len(list1), 2)]
    list_2 = [list2[i] for i in range(1, len(list2), 2)]

    gabungan = list_1 + list_2

    gabungan.sort(reverse=True)

    return gabungan

list1 = [10, 21, 30, 41, 50, 61]
list2 = [15, 25, 35, 45, 55, 65]
urutan = urutan_bilangan(list1, list2)
print(urutan)

"""3. Buat sebuah program untuk mensimulasikan transaksi ATM. Program harus:
 1. Meminta pengguna memasukkan PIN (dibatasi 3 kali percobaan).
 2. Setelah PIN benar, meminta jumlah penarikan.
 3. Jika saldo kurang dari jumlah yang ditarik, munculkan pesan kesalahan.
 4. Jika penarikan berhasil, tampilkan saldo akhir.

"""

def simulasi():
    saldo = 50000
    pin_terdaftar = "1234"
    kesempatan = 3

    # Pengguna memasukkan PIN yang benar dengan 3 kali kesempatan
    while kesempatan > 0:
        pin_input = input("Masukkan PIN Anda: ")

        if pin_input == pin_terdaftar:
            print("PIN benar! Selamat datang!")

            # Meminta jumlah penarikan
            try:
                jumlah_tarik = int(input("Masukkan jumlah penarikan: "))
            except ValueError:
                print("Masukkan jumlah yang valid!")
                return

            # Cek apakah saldo cukup
            if jumlah_tarik > saldo:
                print("Saldo Anda tidak cukup untuk melakukan penarikan sebesar", jumlah_tarik, ":(" )
            else:
                saldo -= jumlah_tarik
                print(f"Penarikan berhasil >_<! Saldo akhir Anda adalah: Rp{saldo}")

            return  # Keluar setelah transaksi selesai

        else:
            kesempatan -= 1
            print(f"PIN salah! Kesempatan tersisa: {kesempatan}")

    print("Anda telah 3 kali salah memasukkan PIN. Akun Anda terblokir!")

# Menjalankan program simulasi ATM
simulasi()

"""4. Diberikan file CSV berisi data nilai ujian mahasiswa. Tugas Anda adalah menulis sebuah program yang:
 1. Membaca file CSV dan menyimpan datanya ke dalam dictionary.
 2. Menghitung rata-rata nilai tiap mahasiswa.
 3. Menampilkan mahasiswa dengan nilai tertinggi dan terendah.

"""

import csv
 #Membaca dan menyimpan isi file nilai.csv
def csv_to_dict(file_name):
    data_dict = {}

    with open(file_name, mode='r') as file:
        csv_reader = csv.reader(file)
        header = next(csv_reader)

        nilai_list = [int(row[0]) for row in csv_reader]

    data_dict['nilai'] = nilai_list

    return data_dict

# Menghitung Rata-rata, nilai tertinggi, dan nilai terendah
def hitung_rata_tertinggi_terendah(data_dict):
    nilai_list = data_dict['nilai']

    # Hitung total nilai, jumlah elemen, rata-rata, nilai tertinggi, dan terendah
    if len(nilai_list) > 0:
        total_nilai = sum(nilai_list)
        jumlah_nilai = len(nilai_list)
        rata_rata = total_nilai / jumlah_nilai
        nilai_tertinggi = max(nilai_list)
        nilai_terendah = min(nilai_list)
    else:
        rata_rata = 0
        nilai_tertinggi = None
        nilai_terendah = None

    return rata_rata, nilai_tertinggi, nilai_terendah


file_name = 'nilai.csv'

data = csv_to_dict(file_name)

rata_rata, nilai_tertinggi, nilai_terendah = hitung_rata_tertinggi_terendah(data)

# Menampilkan hasil
print(f"Rata-rata nilai: {rata_rata:.2f}")
print(f"Nilai tertinggi: {nilai_tertinggi}")
print(f"Nilai terendah: {nilai_terendah}")

"""5. Buatlah permainan sederhana menggunakan Python, di mana komputer akan memilih sebuah angka secara acak antara 1 hingga 100, dan pengguna harus menebak angka tersebut. Setiap tebakan yang salah akan memberikan petunjuk apakah angka yang ditebak lebih besar atau lebih kecil dari angka sebenarnya. Batasi jumlah percobaan menjadi 5 kali. Setelah permainan selesai, tampilkan apakah pemain menang atau kalah."""

import random

def yuh_tebak():
    angka_rahasia = random.randint(1, 100)
    print("Selamat datang di permainan tebak angka!")
    print("Saya telah memilih sebuah angka antara 1 dan 100.")
    print("Coba tebak angka tersebut! Anda memiliki 5 percobaan.")

    # Limit Percobaan
    percobaan = 5

    for i in range(percobaan):
        # Meminta pengguna untuk memasukkan tebakan
        tebakan = int(input(f"Tebakan ke-{i+1}: "))

        # Memeriksa tebakan
        if tebakan < angka_rahasia:
            print("Waduh, tebakan Anda terlalu kecil.")
        elif tebakan > angka_rahasia:
            print("Yaaah, tebakan Anda terlalu besar.")
        else:
            print(f"YEEEAAAY! Anda telah menebak angka {angka_rahasia} dengan benar!")
            break  # Keluar dari loop jika tebakan benar

    else:
        # Jika semua percobaan habis
        print(f"Kesempatan dah abis. Angka yang benar adalah {angka_rahasia}.")

# Memulai permainan
yuh_tebak()

"""6. Buat fungsi rekursif yang menerima input bilangan bulat `n` dan menghasilkan urutan bilangan seperti berikut ini:
```
Input: n = 4
Output: 1, 1, 2, 6, 24
```
Fungsi ini harus menggunakan konsep rekursi untuk menghitung faktorial setiap angka hingga `n`.

"""

def faktorial(n):

    if n == 0 or n == 1:
        return 1
    else:
        return n * faktorial(n - 1)

def urutan_faktorial(n):

    return [faktorial(i) for i in range(1, n + 1)]

# Penggunaan
n = 4
output = urutan_faktorial(n)
print(output)

"""7. Buatlah program untuk memecahkan masalah "minimum coin change". Diberikan jumlah uang dan daftar nilai koin yang tersedia (misalnya, 1, 5, 10, 25), tentukan kombinasi minimum koin yang diperlukan untuk mencapai jumlah uang tersebut. Namun, program Anda harus bisa menangani koin-koin yang nilai dan jumlahnya ditentukan pengguna."""

def minimum_coin_change(amount, coins):
    # Inisialisasi tabel untuk menyimpan jumlah minimum koin untuk setiap jumlah
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0  # Tidak memerlukan koin untuk mencapai jumlah 0

    # Proses untuk setiap koin yang tersedia
    for coin in coins:
        for x in range(coin, amount + 1):
            dp[x] = min(dp[x], dp[x - coin] + 1)

    # Jika dp[amount] masih inf, berarti tidak ada solusi
    if dp[amount] == float('inf'):
        return None
    else:
        return dp[amount]

# Contoh penggunaan
def main():
    # Input jumlah uang
    amount = int(input("Masukkan jumlah uang yang ingin dicapai: "))
    # Input nilai koin yang tersedia
    coins_input = input("Masukkan nilai koin yang tersedia (pisahkan dengan spasi): ")
    coins = list(map(int, coins_input.split()))

    # Menghitung kombinasi minimum koin
    result = minimum_coin_change(amount, coins)

    if result is None:
        print("Tidak mungkin mencapai jumlah tersebut dengan koin yang tersedia.")
    else:
        print(f"Jumlah minimum koin yang diperlukan: {result}")

# Memulai program
if __name__ == "__main__":
    main()

"""8. Buat sebuah program yang menerima string dari pengguna dan mengonversi string tersebut menjadi sebuah list berisi kata-kata terbalik. Misalnya:
```
Input: "Saya suka Python"
Output: ["ayaS", "akus", "nohtyP"]
```

"""

def reverse_words(input_string):
    # Memisahkan string menjadi list kata
    words = input_string.split()
    # Membalik setiap kata dan menyimpannya dalam list baru
    reversed_words = [word[::-1] for word in words]
    return reversed_words

# Fungsi utama untuk meminta input dari pengguna
def main():
    # Menerima input string dari pengguna
    user_input = input("Masukkan string: ")
    # Mengonversi string menjadi list kata terbalik
    result = reverse_words(user_input)
    # Menampilkan hasil
    print(result)

# Memulai program
if __name__ == "__main__":
    main()

"""9. Buat class bernama `Buku` yang memiliki atribut `judul`, `penulis`, dan `tahun_terbit`. Buat method dalam class untuk menampilkan informasi buku, serta method untuk menghitung usia buku berdasarkan tahun saat ini. Buatlah 3 objek dari class `Buku` dan tampilkan informasi serta usia masing-masing buku"""

class Buku:
    def __init__(self, judul, penulis, tahun_terbit):
        self.judul = judul
        self.penulis = penulis
        self.tahun_terbit = tahun_terbit

    def tampilkan_informasi(self):
        print(f"Judul: {self.judul}")
        print(f"Penulis: {self.penulis}")
        print(f"Tahun Terbit: {self.tahun_terbit}")

    def hitung_usia(self):
        from datetime import datetime
        tahun_sekarang = datetime.now().year
        return tahun_sekarang - self.tahun_terbit

# Membuat 3 objek dari class Buku
buku1 = Buku("Maryamah Karpov", "Andrea Hirata", 2008)
buku2 = Buku("Laut Bercerita", "Leila S. Chudori", 2017)
buku3 = Buku("Rindu", "Tere Liye", 2014)

# Menampilkan informasi dan usia masing-masing buku
for buku in [buku1, buku2, buku3]:
    buku.tampilkan_informasi()
    print(f"Usia Buku: {buku.hitung_usia()} tahun\n")

"""10. Buatlah program yang mengimplementasikan algoritma pencarian biner, namun dengan modifikasi: algoritma harus bisa mencari nilai di list yang hanya berisi angka genap, dan jika nilai yang dicari adalah angka ganjil, program harus menampilkan pesan bahwa nilai tersebut tidak bisa ditemukan.

"""

def pencarian_biner(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

def main():
    # Daftar angka genap yang sudah terurut
    daftar_genap = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

    # Meminta input dari pengguna
    nilai_dicari = int(input("Masukkan nilai yang ingin dicari: "))

    # Memeriksa apakah nilai yang dicari adalah angka genap
    if nilai_dicari % 2 != 0:
        print("Nilai tidak bisa ditemukan. Harap masukkan angka genap.")
    else:
        # Melakukan pencarian biner
        hasil = pencarian_biner(daftar_genap, nilai_dicari)
        if hasil != -1:
            print(f"Nilai {nilai_dicari} ditemukan pada indeks {hasil}.")
        else:
            print(f"Nilai {nilai_dicari} tidak ditemukan dalam daftar.")

# Memulai program
if __name__ == "__main__":
    main()